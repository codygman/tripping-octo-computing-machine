module Control.Monad.Eff.Exception where
import Control.Monad.Eff.Exception ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
foreign import data Error :: *
foreign import data Exception :: !
foreign import catchException :: forall a eff. (Control.Monad.Eff.Exception.Error -> Control.Monad.Eff.Eff eff a) -> Control.Monad.Eff.Eff (err :: Control.Monad.Eff.Exception.Exception | eff) a -> Control.Monad.Eff.Eff eff a
foreign import throwException :: forall a eff. Control.Monad.Eff.Exception.Error -> Control.Monad.Eff.Eff (err :: Control.Monad.Eff.Exception.Exception | eff) a
foreign import message :: Control.Monad.Eff.Exception.Error -> Prim.String
foreign import error :: Prim.String -> Control.Monad.Eff.Exception.Error
foreign import showErrorImpl :: Control.Monad.Eff.Exception.Error -> Prim.String
foreign import instance showError :: Prelude.Show Control.Monad.Eff.Exception.Error
