"use strict";
var Prelude = require("Prelude");
var when = function (__dict_Monad_0) {
    return function (_37) {
        return function (_38) {
            if (_37) {
                return _38;
            };
            if (!_37) {
                return Prelude["return"](__dict_Monad_0)(Prelude.unit);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var unless = function (__dict_Monad_1) {
    return function (_39) {
        return function (_40) {
            if (!_39) {
                return _40;
            };
            if (_39) {
                return Prelude["return"](__dict_Monad_1)(Prelude.unit);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var replicateM = function (__dict_Monad_2) {
    return function (_32) {
        return function (_33) {
            if (_32 === 0) {
                return Prelude["return"](__dict_Monad_2)([  ]);
            };
            return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(_33)(function (_4) {
                return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_2)(_32 - 1)(_33))(function (_3) {
                    return Prelude["return"](__dict_Monad_2)(Prelude[":"](_4)(_3));
                });
            });
        };
    };
};
var foldM = function (__dict_Monad_3) {
    return function (_34) {
        return function (_35) {
            return function (_36) {
                if (_36.length === 0) {
                    return Prelude["return"](__dict_Monad_3)(_35);
                };
                if (_36.length >= 1) {
                    var _312 = _36.slice(1);
                    return Prelude[">>="](__dict_Monad_3["__superclass_Prelude.Bind_1"]())(_34(_35)(_36[0]))(function (a$prime) {
                        return foldM(__dict_Monad_3)(_34)(a$prime)(_312);
                    });
                };
                throw new Error("Failed pattern match");
            };
        };
    };
};
module.exports = {
    unless: unless, 
    when: when, 
    foldM: foldM, 
    replicateM: replicateM
};
