module Data.DOM.Simple.Element where
import Data.DOM.Simple.Unsafe.Element ()
import Data.DOM.Simple.Unsafe.Utils ()
import Prelude ()
import Data.Foldable ()
import Data.DOM.Simple.Element ()
import Data.Tuple ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Data.DOM.Simple.Unsafe.Utils ()
import Data.DOM.Simple.Unsafe.Element ()
import Data.DOM.Simple.Types ()
import Data.Foldable ()
import Data.Maybe ()
import Data.Array ()
import Data.Tuple ()
class Element b where
  getElementById :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) (Data.Maybe.Maybe Data.DOM.Simple.Types.HTMLElement)
  getElementsByClassName :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) [Data.DOM.Simple.Types.HTMLElement]
  getElementsByName :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) [Data.DOM.Simple.Types.HTMLElement]
  querySelector :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) (Data.Maybe.Maybe Data.DOM.Simple.Types.HTMLElement)
  querySelectorAll :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) [Data.DOM.Simple.Types.HTMLElement]
  getAttribute :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prim.String
  setAttribute :: forall eff. Prim.String -> Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
  hasAttribute :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prim.Boolean
  removeAttribute :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
  children :: forall eff. b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) [Data.DOM.Simple.Types.HTMLElement]
  innerHTML :: forall eff. b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prim.String
  setInnerHTML :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
  textContent :: forall eff. b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prim.String
  setTextContent :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
  value :: forall eff. b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prim.String
  setValue :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
  contentWindow :: forall eff. b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Data.DOM.Simple.Types.HTMLWindow
  classRemove :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
  classAdd :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
  classToggle :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
  classContains :: forall eff. Prim.String -> b -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prim.Boolean
foreign import blur :: forall eff. Data.DOM.Simple.Types.HTMLElement -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
foreign import focus :: forall eff. Data.DOM.Simple.Types.HTMLElement -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
foreign import click :: forall eff. Data.DOM.Simple.Types.HTMLElement -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
foreign import setAttributes :: forall eff a. (Data.DOM.Simple.Element.Element a) => [Data.Tuple.Tuple Prim.String Prim.String] -> a -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | eff) Prelude.Unit
foreign import instance htmlElement :: Data.DOM.Simple.Element.Element Data.DOM.Simple.Types.HTMLElement
foreign import instance showHtmlElement :: Prelude.Show Data.DOM.Simple.Types.HTMLElement
