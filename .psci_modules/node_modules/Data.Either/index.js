"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
var Left = (function () {
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    return Left;
})();
var Right = (function () {
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    return Right;
})();
var showEither = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_51) {
            if (_51 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_0)(_51.value0) + ")");
            };
            if (_51 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_1)(_51.value0) + ")");
            };
            throw new Error("Failed pattern match");
        });
    };
};
var functorEither = new Prelude.Functor(function (_45) {
    return function (_46) {
        if (_46 instanceof Left) {
            return new Left(_46.value0);
        };
        if (_46 instanceof Right) {
            return new Right(_45(_46.value0));
        };
        throw new Error("Failed pattern match");
    };
});
var eqEither = function (__dict_Eq_4) {
    return function (__dict_Eq_5) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqEither(__dict_Eq_4)(__dict_Eq_5))(a)(b);
            };
        }, function (_52) {
            return function (_53) {
                if (_52 instanceof Left && _53 instanceof Left) {
                    return Prelude["=="](__dict_Eq_4)(_52.value0)(_53.value0);
                };
                if (_52 instanceof Right && _53 instanceof Right) {
                    return Prelude["=="](__dict_Eq_5)(_52.value0)(_53.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (__dict_Ord_2) {
    return function (__dict_Ord_3) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_2["__superclass_Prelude.Eq_0"]())(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
        }, function (_54) {
            return function (_55) {
                if (_54 instanceof Left && _55 instanceof Left) {
                    return Prelude.compare(__dict_Ord_2)(_54.value0)(_55.value0);
                };
                if (_54 instanceof Right && _55 instanceof Right) {
                    return Prelude.compare(__dict_Ord_3)(_54.value0)(_55.value0);
                };
                if (_54 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_55 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
};
var either = function (_42) {
    return function (_43) {
        return function (_44) {
            if (_44 instanceof Left) {
                return _42(_44.value0);
            };
            if (_44 instanceof Right) {
                return _43(_44.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var applyEither = new Prelude.Apply(function (_47) {
    return function (_48) {
        if (_47 instanceof Left) {
            return new Left(_47.value0);
        };
        if (_47 instanceof Right) {
            return Prelude["<$>"](functorEither)(_47.value0)(_48);
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorEither;
});
var bindEither = new Prelude.Bind(either(function (e) {
    return function (_) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}), function () {
    return applyEither;
});
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function (_49) {
    return function (_50) {
        if (_49 instanceof Left) {
            return _50;
        };
        return _49;
    };
}, function () {
    return functorEither;
});
module.exports = {
    Left: Left, 
    Right: Right, 
    isRight: isRight, 
    isLeft: isLeft, 
    either: either, 
    functorEither: functorEither, 
    applyEither: applyEither, 
    applicativeEither: applicativeEither, 
    altEither: altEither, 
    bindEither: bindEither, 
    monadEither: monadEither, 
    showEither: showEither, 
    eqEither: eqEither, 
    ordEither: ordEither
};
