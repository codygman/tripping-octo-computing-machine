"use strict";
var Prelude = require("Prelude");
var Data_Map = require("Data.Map");
var Data_Array = require("Data.Array");
var Data_Tuple = require("Data.Tuple");
var Data_Foldable = require("Data.Foldable");
var Data_Maybe = require("Data.Maybe");
var Set = (function () {
    function Set(value0) {
        this.value0 = value0;
    };
    Set.create = function (value0) {
        return new Set(value0);
    };
    return Set;
})();
var union = function (__dict_Ord_0) {
    return function (_66) {
        return function (_67) {
            return new Set(Data_Map.union(__dict_Ord_0)(_66.value0)(_67.value0));
        };
    };
};
var toList = function (_65) {
    return Data_Array.map(Data_Tuple.fst)(Data_Map.toList(_65.value0));
};
var singleton = function (a) {
    return new Set(Data_Map.singleton(a)(Prelude.unit));
};
var showSet = function (__dict_Show_1) {
    return new Prelude.Show(function (s) {
        return "fromList " + Prelude.show(Prelude.showArray(__dict_Show_1))(toList(s));
    });
};
var member = function (__dict_Ord_2) {
    return function (_59) {
        return function (_60) {
            return Data_Map.member(__dict_Ord_2)(_59)(_60.value0);
        };
    };
};
var isEmpty = function (_57) {
    return Data_Map.isEmpty(_57.value0);
};
var insert = function (__dict_Ord_3) {
    return function (_61) {
        return function (_62) {
            return new Set(Data_Map.insert(__dict_Ord_3)(_61)(Prelude.unit)(_62.value0));
        };
    };
};
var eqSet = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_70) {
        return function (_71) {
            return Prelude["/="](Data_Map.eqMap(__dict_Eq_4)(Prelude.eqUnit))(_70.value0)(_71.value0);
        };
    }, function (_68) {
        return function (_69) {
            return Prelude["=="](Data_Map.eqMap(__dict_Eq_4)(Prelude.eqUnit))(_68.value0)(_69.value0);
        };
    });
};
var empty = new Set(Data_Map.empty);
var fromList = function (__dict_Ord_5) {
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (m) {
        return function (a) {
            return insert(__dict_Ord_5)(a)(m);
        };
    })(empty);
};
var unions = function (__dict_Ord_6) {
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(union(__dict_Ord_6))(empty);
};
var $$delete = function (__dict_Ord_7) {
    return function (_63) {
        return function (_64) {
            return new Set(Data_Map["delete"](__dict_Ord_7)(_63)(_64.value0));
        };
    };
};
var difference = function (__dict_Ord_8) {
    return function (s1) {
        return function (s2) {
            return Data_Foldable.foldl(Data_Foldable.foldableArray)(Prelude.flip($$delete(__dict_Ord_8)))(s1)(toList(s2));
        };
    };
};
var checkValid = function (_58) {
    return Data_Map.checkValid(_58.value0);
};
module.exports = {
    difference: difference, 
    unions: unions, 
    union: union, 
    fromList: fromList, 
    toList: toList, 
    "delete": $$delete, 
    member: member, 
    insert: insert, 
    checkValid: checkValid, 
    singleton: singleton, 
    isEmpty: isEmpty, 
    empty: empty, 
    eqSet: eqSet, 
    showSet: showSet
};
