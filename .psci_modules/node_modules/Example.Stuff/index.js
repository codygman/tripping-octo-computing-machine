"use strict";
var Control_Monad_JQuery = require("Control.Monad.JQuery");
var Data_Foldable = require("Data.Foldable");
var Prelude = require("Prelude");
var Global = require("Global");
var Data_Array = require("Data.Array");
var Data_String = require("Data.String");
var Data_Either = require("Data.Either");
var Data_Foreign = require("Data.Foreign");
var Data_Foreign_Class = require("Data.Foreign.Class");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("Control.Monad.Eff.Exception");
var Control_Monad = require("Control.Monad");
var Debug_Trace = require("Debug.Trace");
var Data_Foreign_Null = require("Data.Foreign.Null");
var $dollar$dot = Control_Monad_JQuery.select;
var usernameValid = Prelude["=="](Prelude.eqString)("test");
var toggleHighlightError = function (input) {
    return Control_Monad_JQuery.css({
        "border-color": "red", 
        "border-width": "large"
    })(input);
};

/**
 *  gives "x" in the case of Right "x" or the provided default value
 */
var fromEither = function (def) {
    return Data_Either.either(Prelude["const"](def))(Prelude.id(Prelude.categoryArr));
};
var validate = function (validator) {
    return function (input) {
        return function __do() {
            var _0 = Prelude.liftM1(Control_Monad_Eff.monadEff)(fromEither(""))(Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Foreign.readString)(Control_Monad_JQuery.getValue(input)))();
            return (function () {
                var valid = validator(_0);
                return function __do() {
                    Control_Monad_JQuery["toggleClass'"]("invalid")(!valid)(input)();
                    return Control_Monad_JQuery["toggleClass'"]("valid")(valid)(input)();
                };
            })()();
        };
    };
};
var watch = function (validator) {
    return function (input) {
        return Prelude.flip(Control_Monad_JQuery.on("blur"))(input)(function (_) {
            return function (__1) {
                return validate(validator)(input);
            };
        });
    };
};
var allDigits = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Foldable.all(Data_Foldable.foldableArray)(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(Global.isNaN)))(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.map(Global.readInt(10)))(Data_String.split("")));
var applyFunction = function (_1) {
    if (_1 === "allDigits") {
        return allDigits;
    };
    throw new Error("Failed pattern match");
};
module.exports = {
    applyFunction: applyFunction, 
    watch: watch, 
    validate: validate, 
    fromEither: fromEither, 
    toggleHighlightError: toggleHighlightError, 
    usernameValid: usernameValid, 
    allDigits: allDigits, 
    "$.": $dollar$dot
};
