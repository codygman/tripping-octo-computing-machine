module Validator.Actions where
import Control.Monad.JQuery ()
import Data.Either ()
import Prelude ()
import Validator.Actions ()
import Data.Foreign ()
import Data.DOM.Simple.Element ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Data.Either ()
import Data.Foreign ()
import Control.Monad ()
import Data.DOM.Simple.Element ()
import Data.DOM.Simple.Events ()
import Data.DOM.Simple.Types ()
import Control.Monad.JQuery ()
--  toggleInvalid input = do
--    classRemove "invalid" input
--    classAdd "valid" input  
--  gives "x" in the case of Right "x" or the provided default value
foreign import watch' :: forall t. (Prim.String -> Prim.Boolean) -> Data.DOM.Simple.Types.HTMLElement -> Control.Monad.Eff.Eff (dom :: DOM.DOM | t) Prelude.Unit
foreign import f :: Prelude.Unit
foreign import watch :: forall t. (Prim.String -> Prim.Boolean) -> Control.Monad.JQuery.JQuery -> Control.Monad.Eff.Eff (dom :: DOM.DOM | t) Control.Monad.JQuery.JQuery
foreign import validate' :: forall t. (Prim.String -> Prim.Boolean) -> Data.DOM.Simple.Types.HTMLElement -> Control.Monad.Eff.Eff (dom :: DOM.DOM | t) Prelude.Unit
foreign import toggleInvalid :: forall t. Data.DOM.Simple.Types.HTMLElement -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | t) Prelude.Unit
foreign import toggleValid :: forall t. Data.DOM.Simple.Types.HTMLElement -> Control.Monad.Eff.Eff (dom :: Data.DOM.Simple.Types.DOM | t) Prelude.Unit
foreign import validate :: forall t. (Prim.String -> Prim.Boolean) -> Control.Monad.JQuery.JQuery -> Control.Monad.Eff.Eff (dom :: DOM.DOM | t) Control.Monad.JQuery.JQuery
foreign import fromEither :: forall r l. r -> Data.Either.Either l r -> r
foreign import toggleHighlightError :: forall inp. Control.Monad.JQuery.JQuery -> Control.Monad.Eff.Eff (dom :: DOM.DOM | inp) Control.Monad.JQuery.JQuery
foreign import ($.) :: forall eff. Prim.String -> Control.Monad.Eff.Eff (dom :: DOM.DOM | eff) Control.Monad.JQuery.JQuery
