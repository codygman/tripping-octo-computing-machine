module Validator.Main where
import Control.Monad.JQuery ()
import Prelude ()
import Validator.Actions ()
import Validator.Validators ()
import Prim ()
import Prelude ()
import Control.Bind ()
import Control.Monad.Eff ()
import Debug.Trace ()
import Data.DOM.Simple.Document ()
import Data.DOM.Simple.Element ()
import Data.DOM.Simple.Window ()
import Data.DOM.Simple.Types ()
import Data.Traversable ()
import Control.Monad.JQuery ()
import Validator.Actions ()
import Validator.Validators ()
import Data.Foldable ()
import Data.Array ()
import Data.Array.Unsafe ()
--  setInputValid :: forall eff. HTMLElement -> Eff (dom :: _ | eff) HTMLElement
--  setInputValid input = do
--    classRemove "invalid" input
--    classAdd "valid" input
--    return input
--  setInputInvalid :: forall eff. HTMLElement -> Eff (dom :: _ | eff) HTMLElement
--  setInputInvalid input = do
--    classRemove "valid" input
--    classAdd "invalid" input
--    return input
--  validateInput :: forall eff. HTMLElement -> Eff (dom :: _ | eff) HTMLElement
--  validateInput input = do
--    inputName <- getAttribute "name" input
--    functionName <- getAttribute "validator" input
--    -- trace $ inputName ++ ": " ++ functionName
--    return input
--  modifyInputs :: forall eff. HTMLDocument -> Eff (dom :: _ | eff) [HTMLElement]
--  modifyInputs = querySelectorAll "input[validator]" >=> sequence <<< A.map setInputValid
--  main = do
--    doc <- document globalWindow
--    -- modifyInputs doc
--    inputs <- querySelectorAll "input[validator]" doc
--    -- trace $ "number of input[validator] elements: " ++ (show $ A.length inputs)
--    let input = UA.head inputs
--    isValid <- validateInput input
--    trace $ "isvalid: " ++ (show isValid)
--    trace "done"
foreign import main :: forall t8. Control.Monad.Eff.Eff (dom :: DOM.DOM | t8) Control.Monad.JQuery.JQuery
