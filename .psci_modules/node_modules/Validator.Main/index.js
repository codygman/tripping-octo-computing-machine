"use strict";
var Control_Monad_JQuery = require("Control.Monad.JQuery");
var Prelude = require("Prelude");
var Validator_Actions = require("Validator.Actions");
var Validator_Validators = require("Validator.Validators");
var Control_Bind = require("Control.Bind");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Debug_Trace = require("Debug.Trace");
var Data_DOM_Simple_Document = require("Data.DOM.Simple.Document");
var Data_DOM_Simple_Element = require("Data.DOM.Simple.Element");
var Data_DOM_Simple_Window = require("Data.DOM.Simple.Window");
var Data_DOM_Simple_Types = require("Data.DOM.Simple.Types");
var Data_Traversable = require("Data.Traversable");
var Data_Foldable = require("Data.Foldable");
var Data_Array = require("Data.Array");
var Data_Array_Unsafe = require("Data.Array.Unsafe");

/**
 *  setInputValid :: forall eff. HTMLElement -> Eff (dom :: _ | eff) HTMLElement
 *  setInputValid input = do
 *    classRemove "invalid" input
 *    classAdd "valid" input
 *    return input
 *  setInputInvalid :: forall eff. HTMLElement -> Eff (dom :: _ | eff) HTMLElement
 *  setInputInvalid input = do
 *    classRemove "valid" input
 *    classAdd "invalid" input
 *    return input
 *  validateInput :: forall eff. HTMLElement -> Eff (dom :: _ | eff) HTMLElement
 *  validateInput input = do
 *    inputName <- getAttribute "name" input
 *    functionName <- getAttribute "validator" input
 *    -- trace $ inputName ++ ": " ++ functionName
 *    return input
 *  modifyInputs :: forall eff. HTMLDocument -> Eff (dom :: _ | eff) [HTMLElement]
 *  modifyInputs = querySelectorAll "input[validator]" >=> sequence <<< A.map setInputValid
 *  main = do
 *    doc <- document globalWindow
 *    -- modifyInputs doc
 *    inputs <- querySelectorAll "input[validator]" doc
 *    -- trace $ "number of input[validator] elements: " ++ (show $ A.length inputs)
 *    let input = UA.head inputs
 *    isValid <- validateInput input
 *    trace $ "isvalid: " ++ (show isValid)
 *    trace "done"
 */
var main = Control_Monad_JQuery.ready(function __do() {
    Control_Bind["=<<"](Control_Monad_Eff.bindEff)(Validator_Actions.watch(Validator_Validators.noDigits))(Validator_Actions["$."]("input[name=username]"))();
    return Control_Bind["=<<"](Control_Monad_Eff.bindEff)(Validator_Actions.watch(Validator_Validators.allDigits))(Validator_Actions["$."]("input[name=zipcode]"))();
});
module.exports = {
    main: main
};
